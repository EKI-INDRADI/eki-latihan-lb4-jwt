-- belajar typescript dlu

buatlah file /src/services/hash.password.bcrypt.ts

interface PasswordHasher <T = string>{
    hashPassword(password:T) : Promise<T>;
}



npm install bcryptjs @types/bcryptjs


/src/services/hash.password.bcrypt.ts
----------------
import { genSalt, hash } from 'bcryptjs';

interface PasswordHasher<T = string> {
    hashPassword(password: T): Promise<T>;
}


export class BcryptHasher implements PasswordHasher<string> {
    round: number = 10;
    async hashPassword(password: string) {
        const salt = await genSalt(this.round);
        return await hash(password, salt);
    }
}
----------------



pada \src\controllers\user.controller.ts

-------default----------
export class UserController {
  constructor(
    @repository(UserRepository)
   public UserRepository: UserRepository
  ) {}
-------default----------


rubah jadi
----------------------
import { inject } from "@loopback/core";
import { BcryptHasher } from "../services/hash.password.bcrypt";

// jgn lupa ctrl+space   abis tekan enter agar auto import
export class UserController {
  constructor(
    @repository(UserRepository)
   public UserRepository: UserRepository,
   @inject('service.hasher')
   public hasher: BcryptHasher,
  ) {}

----------------------




masih pada \src\controllers\user.controller.ts

-------default----------
  async signup(@requestBody() userData: User ){
    validateCredentials(_.pick(userData, ['email','password']))

    // savedUser : any   << eki edit
    const savedUser : any =  await this.UserRepository.create(userData);
    delete savedUser.password;
    return savedUser;

  }
-------default----------

rubah jadi
----------------------
//35. Encrypt User Password by Injecting Service

  async signup(@requestBody() userData: User ){
    validateCredentials(_.pick(userData, ['email','password']))
// encrypt the user password
// eslint-disable-next-line require-atomic-updates
    userData.password = await this.hasher.hashPassword(userData.password);

    // savedUser : any   << eki edit
    const savedUser : any =  await this.UserRepository.create(userData);
    delete savedUser.password;
    return savedUser;
// next 6:19
// POST /signup failed with status code 500. ResolutionError: The key 'service.hasher' is not bound to any value in context RequestContext-nBJp1bfTQDWucGjGfgib1Q-14

  }
----------------------




README.md
----------------------
## tambahan bcrypt
```ts
const context = {
    config : [],
    'service.hasher' : BcryptHasher,
    'round' : 10
}
```
----------------------


pada ts application ts harus di tambahkan

\src\application.ts
----------------------
//tambahkan code :

export class Rnd1Application extends BootMixin(
  ServiceMixin(RepositoryMixin(RestApplication)),
) {
  constructor(options: ApplicationConfig = {}) {
    super(options);


    // FIX BUG POST /signup failed with status code 500. ResolutionError: The key 'service.hasher' is not bound to any value in context RequestContext-nBJp1bfTQDWucGjGfgib1Q-14
    //=========================================================
    // set up the custom sequence

    this.setupBinding();


    //=========================================================



//tambahkan code :

   this.projectRoot = __dirname;
    // Customize @loopback/boot Booter Conventions here
    this.bootOptions = {
      controllers: {
        // Customize ControllerBooter Conventions here
        dirs: ['controllers'],
        extensions: ['.controller.js'],
        nested: true,
      },
    };
  }
    // FIX BUG POST /signup failed with status code 500. ResolutionError: The key 'service.hasher' is not bound to any value in context RequestContext-nBJp1bfTQDWucGjGfgib1Q-14
    //=========================================================
    // set up the custom sequence

    setupBinding() : void {
      this.bind('service.hasher').toClass(BcryptHasher);

      // ctrl+space BcryptHasher enter (biar ke import)
    }
    

    //=========================================================



----------------------


npm start coba signup
sucess







tambahan , masih pada
\src\application.ts

tambah this bind
----------------------

    setupBinding() : void {
      this.bind('service.hasher').toClass(BcryptHasher);

      // ctrl+space BcryptHasher enter (biar ke import)

      //--------------------------- tambahan
        this.bind('rounds').to(10);
      //--------------------------- /tambahan
    }   
----------------------




pastikan pada  round sudah sesuai
\src\services\hash.password.bcrypt.ts
----------------------
import { inject } from '@loopback/core';
import { genSalt, hash } from 'bcryptjs';

interface PasswordHasher<T = string> {
    hashPassword(password: T): Promise<T>;
}


export class BcryptHasher implements PasswordHasher<string> {
    // --- tambahan dari application.ts
@inject('rounds')
public readonly rounds : number;


   // round: number = 10;  <<=== tidak diperlukan lg
        // --- tambahan dari application.ts
    async hashPassword(password: string) {
        const salt = await genSalt(this.rounds);
        return await hash(password, salt);
    }
}
----------------------







-----------------------ERROR SETELAH BERHASIL INSERT

Errors
Hide
 
Resolver error at paths./signup.post.responses.200.content.schema.$ref
Could not resolve reference: Could not resolve pointer: /definitions/User does not exist in document

-----------------------


------------------- NOT FIXED
di loopback4
    "swagger-ui-dist": {
      "version": "3.40.0",

 "swagger-ui-dist": "3.40.0",

https://www.npmjs.com/package/swagger-ui-dist
npm uninstall swagger-ui-dist@3.40.0
npm install swagger-ui-dist@3.43.0
------------------ NOT FIXED


----------------- SOLVED FIXED
\src\controllers\user.controller.ts

  @post('/signup', {
    responses: {
      '200': {
        description: 'User',
        content: {
          schema: getJsonSchemaRef(User).$ref,
        }
      }
    }

  })
----------------- SOLVED FIXED





